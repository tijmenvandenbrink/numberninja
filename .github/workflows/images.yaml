name: Images

on:
  workflow_dispatch:
    inputs:
      component:
        description: 'Component to build and release'
        required: true
        type: choice
        options:
        - backend
        - frontend
        - both
      bump_type:
        description: 'Version bump type'
        required: true
        type: choice
        options:
        - patch
        - minor
        - major

env:
  REGISTRY: ghcr.io
  PLATFORMS: linux/amd64,linux/arm64

permissions:
  contents: write
  packages: write

jobs:
  bump-and-build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Bump backend version
        if: github.event.inputs.component == 'backend' || github.event.inputs.component == 'both'
        run: |
          BUMP_TYPE="${{ github.event.inputs.bump_type }}"
          ./scripts/bump-version.sh backend $BUMP_TYPE
          echo "BACKEND_VERSION=$(cat backend/VERSION)" >> $GITHUB_ENV

      - name: Bump frontend version  
        if: github.event.inputs.component == 'frontend' || github.event.inputs.component == 'both'
        run: |
          BUMP_TYPE="${{ github.event.inputs.bump_type }}"
          ./scripts/bump-version.sh frontend $BUMP_TYPE
          echo "FRONTEND_VERSION=$(cat frontend/VERSION)" >> $GITHUB_ENV

      - name: Commit version bumps
        run: |
          git add backend/VERSION frontend/VERSION frontend/package.json
          git commit -m "ðŸ”– Bump ${{ github.event.inputs.component }} version(s)

          Component: ${{ github.event.inputs.component }}
          Bump type: ${{ github.event.inputs.bump_type }}
          
          ðŸ¤– Generated by images workflow" || echo "Nothing to commit"
          git push

  build-backend:
    needs: bump-and-build
    if: github.event.inputs.component == 'backend' || github.event.inputs.component == 'both'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull latest changes
        run: git pull origin main

      - name: Get backend version
        id: version
        run: |
          VERSION=$(cat backend/VERSION)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Backend version: $VERSION"

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}/backend
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=raw,value=${{ steps.version.outputs.version }},enable={{is_default_branch}}
            type=raw,value=latest,enable={{is_default_branch}}
            type=sha,prefix=sha-,format=short

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          platforms: ${{ env.PLATFORMS }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=backend
          cache-to: type=gha,mode=max,scope=backend
          build-args: |
            BUILDTIME=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
            REVISION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.revision'] }}

      - name: Create Backend Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: backend-${{ steps.version.outputs.version }}
          name: Backend v${{ steps.version.outputs.version }}
          body: |
            ## Backend Release v${{ steps.version.outputs.version }}
            
            **Container Image**: `ghcr.io/${{ github.repository }}/backend:${{ steps.version.outputs.version }}`
            
            ### Features
            - FastAPI-based math game backend
            - Multi-architecture support (linux/amd64, linux/arm64)
            - Session management and scoring system
            
            ### Usage
            ```bash
            docker pull ghcr.io/${{ github.repository }}/backend:${{ steps.version.outputs.version }}
            ```
          draft: false
          prerelease: false

  build-frontend:
    needs: bump-and-build
    if: github.event.inputs.component == 'frontend' || github.event.inputs.component == 'both'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull latest changes
        run: git pull origin main

      - name: Get frontend version
        id: version
        run: |
          VERSION=$(cat frontend/VERSION)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Frontend version: $VERSION"

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}/frontend
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=raw,value=${{ steps.version.outputs.version }},enable={{is_default_branch}}
            type=raw,value=latest,enable={{is_default_branch}}
            type=sha,prefix=sha-,format=short

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          platforms: ${{ env.PLATFORMS }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=frontend
          cache-to: type=gha,mode=max,scope=frontend
          build-args: |
            BUILDTIME=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
            REVISION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.revision'] }}

      - name: Create Frontend Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: frontend-${{ steps.version.outputs.version }}
          name: Frontend v${{ steps.version.outputs.version }}
          body: |
            ## Frontend Release v${{ steps.version.outputs.version }}
            
            **Container Image**: `ghcr.io/${{ github.repository }}/frontend:${{ steps.version.outputs.version }}`
            
            ### Features
            - React-based gamified math training app
            - Multi-architecture support (linux/amd64, linux/arm64)
            - Ninja-themed UI with progress tracking
            
            ### Usage
            ```bash
            docker pull ghcr.io/${{ github.repository }}/frontend:${{ steps.version.outputs.version }}
            ```
          draft: false
          prerelease: false

  summary:
    needs: [build-backend, build-frontend]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Summary
        run: |
          echo "## Image Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Backend | ${{ needs.build-backend.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Frontend | ${{ needs.build-frontend.result }} |" >> $GITHUB_STEP_SUMMARY