name: Release

on:
  release:
    types: [published]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_BACKEND: ${{ github.repository }}/backend
  IMAGE_NAME_FRONTEND: ${{ github.repository }}/frontend

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      backend-changed: ${{ steps.changes.outputs.backend }}
      frontend-changed: ${{ steps.changes.outputs.frontend }}
      chart-changed: ${{ steps.changes.outputs.chart }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Detect changes
      id: changes
      run: |
        # Get the previous release tag
        PREVIOUS_TAG=$(gh release list --limit 2 --json tagName --jq '.[1].tagName' || echo "")
        
        if [ -z "$PREVIOUS_TAG" ]; then
          echo "No previous release found, building everything"
          echo "backend=true" >> $GITHUB_OUTPUT
          echo "frontend=true" >> $GITHUB_OUTPUT
          echo "chart=true" >> $GITHUB_OUTPUT
          exit 0
        fi
        
        echo "Comparing changes since $PREVIOUS_TAG..."
        
        # Check for backend changes
        if git diff --name-only $PREVIOUS_TAG..HEAD | grep -E '^backend/' > /dev/null; then
          echo "backend=true" >> $GITHUB_OUTPUT
          echo "Backend changes detected"
        else
          echo "backend=false" >> $GITHUB_OUTPUT
          echo "No backend changes"
        fi
        
        # Check for frontend changes
        if git diff --name-only $PREVIOUS_TAG..HEAD | grep -E '^frontend/' > /dev/null; then
          echo "frontend=true" >> $GITHUB_OUTPUT
          echo "Frontend changes detected"
        else
          echo "frontend=false" >> $GITHUB_OUTPUT
          echo "No frontend changes"
        fi
        
        # Check for chart changes
        if git diff --name-only $PREVIOUS_TAG..HEAD | grep -E '^charts/' > /dev/null; then
          echo "chart=true" >> $GITHUB_OUTPUT
          echo "Chart changes detected"
        else
          echo "chart=false" >> $GITHUB_OUTPUT
          echo "No chart changes"
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-backend:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.backend-changed == 'true'
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Extract metadata for backend
      id: meta-backend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=sha,prefix=sha-,format=short

    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta-backend.outputs.tags }}
        labels: ${{ steps.meta-backend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  build-frontend:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.frontend-changed == 'true'
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Extract metadata for frontend
      id: meta-frontend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=sha,prefix=sha-,format=short

    - name: Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta-frontend.outputs.tags }}
        labels: ${{ steps.meta-frontend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  publish-helm-chart:
    runs-on: ubuntu-latest
    needs: [detect-changes, build-backend, build-frontend]
    if: always() && needs.detect-changes.outputs.chart-changed == 'true'
    permissions:
      contents: write
      packages: write
      pages: write
      id-token: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Configure Git
      run: |
        git config user.name "$GITHUB_ACTOR"
        git config user.email "$GITHUB_ACTOR@users.noreply.github.com"

    - name: Install Helm
      uses: azure/setup-helm@v3
      with:
        version: '3.12.1'

    - name: Update Chart.yaml with release version
      run: |
        # Extract version from tag (remove 'v' prefix if present)
        VERSION=${GITHUB_REF#refs/tags/}
        VERSION=${VERSION#v}
        
        # Update Chart.yaml
        sed -i "s/version: .*/version: $VERSION/" charts/numberninja/Chart.yaml
        sed -i "s/appVersion: .*/appVersion: \"$VERSION\"/" charts/numberninja/Chart.yaml
        
        # Only update image repositories if images were built
        if [ "${{ needs.detect-changes.outputs.backend-changed }}" = "true" ] || [ "${{ needs.detect-changes.outputs.frontend-changed }}" = "true" ]; then
          sed -i "s|repository: numberninja/backend|repository: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}|" charts/numberninja/values.yaml
          sed -i "s|repository: numberninja/frontend|repository: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}|" charts/numberninja/values.yaml
          sed -i "s/tag: \"latest\"/tag: \"$VERSION\"/" charts/numberninja/values.yaml
        fi

    - name: Package Helm chart
      run: |
        mkdir -p .cr-release-packages
        helm package charts/numberninja --destination .cr-release-packages

    - name: Upload chart to release
      uses: softprops/action-gh-release@v1
      with:
        files: .cr-release-packages/*.tgz
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Log in to Container Registry for Helm
      run: |
        echo ${{ secrets.GITHUB_TOKEN }} | helm registry login ${{ env.REGISTRY }} --username ${{ github.actor }} --password-stdin

    - name: Push Helm chart to OCI registry
      run: |
        VERSION=${GITHUB_REF#refs/tags/}
        VERSION=${VERSION#v}
        helm push .cr-release-packages/numberninja-$VERSION.tgz oci://${{ env.REGISTRY }}/${{ github.repository }}/charts

  # Always publish the Helm chart if neither backend nor frontend changed
  # This handles cases where only documentation or other files changed
  publish-chart-fallback:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.chart-changed == 'false' && needs.detect-changes.outputs.backend-changed == 'false' && needs.detect-changes.outputs.frontend-changed == 'false'
    permissions:
      contents: write
      packages: write
      pages: write
      id-token: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Configure Git
      run: |
        git config user.name "$GITHUB_ACTOR"
        git config user.email "$GITHUB_ACTOR@users.noreply.github.com"

    - name: Install Helm
      uses: azure/setup-helm@v3
      with:
        version: '3.12.1'

    - name: Update Chart.yaml with release version
      run: |
        VERSION=${GITHUB_REF#refs/tags/}
        VERSION=${VERSION#v}
        sed -i "s/version: .*/version: $VERSION/" charts/numberninja/Chart.yaml
        sed -i "s/appVersion: .*/appVersion: \"$VERSION\"/" charts/numberninja/Chart.yaml

    - name: Package Helm chart
      run: |
        mkdir -p .cr-release-packages
        helm package charts/numberninja --destination .cr-release-packages

    - name: Upload chart to release
      uses: softprops/action-gh-release@v1
      with:
        files: .cr-release-packages/*.tgz
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Log in to Container Registry for Helm
      run: |
        echo ${{ secrets.GITHUB_TOKEN }} | helm registry login ${{ env.REGISTRY }} --username ${{ github.actor }} --password-stdin

    - name: Push Helm chart to OCI registry
      run: |
        VERSION=${GITHUB_REF#refs/tags/}
        VERSION=${VERSION#v}
        helm push .cr-release-packages/numberninja-$VERSION.tgz oci://${{ env.REGISTRY }}/${{ github.repository }}/charts