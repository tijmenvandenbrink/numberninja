name: CI

on:
  pull_request:
    branches: [ main ]
    paths-ignore:
      - 'docs/**'
      - '*.md'
  push:
    branches: [ main ]
    paths-ignore:
      - 'docs/**'
      - '*.md'
  workflow_dispatch:
    inputs:
      run_e2e:
        description: 'Force E2E tests to run'
        type: boolean
        default: false

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_BACKEND: ${{ github.repository }}/backend
  IMAGE_NAME_FRONTEND: ${{ github.repository }}/frontend

jobs:
  changes:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      backend: ${{ steps.filter.outputs.backend }}
      frontend: ${{ steps.filter.outputs.frontend }}
      charts: ${{ steps.filter.outputs.charts }}
      go: ${{ steps.filter.outputs.go }}
      js: ${{ steps.filter.outputs.js }}
      docker: ${{ steps.filter.outputs.docker }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Check for changes
        uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            backend:
              - 'backend/**'
            frontend:
              - 'frontend/**'
            charts:
              - 'charts/**'
            go:
              - 'backend/**/*.go'
              - 'backend/go.mod'
              - 'backend/go.sum'
            js:
              - 'frontend/**/*.js'
              - 'frontend/**/*.jsx'
              - 'frontend/**/*.ts'
              - 'frontend/**/*.tsx'
              - 'frontend/package*.json'
            docker:
              - 'backend/Dockerfile'
              - 'frontend/Dockerfile'

  test-backend:
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.go == 'true' || needs.changes.outputs.backend == 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version-file: 'backend/go.mod'
          cache: true
          cache-dependency-path: backend/go.sum

      - name: Run tests
        working-directory: backend
        run: go test -v -race -coverprofile=coverage.out ./...

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        if: github.event_name == 'push'
        with:
          file: ./backend/coverage.out
          flags: backend

  test-frontend:
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.js == 'true' || needs.changes.outputs.frontend == 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: 'frontend/.nvmrc'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: frontend
        run: npm ci

      - name: Run linter
        working-directory: frontend
        run: npm run lint

      - name: Run tests
        working-directory: frontend
        run: |
          if npm run | grep -q "test"; then
            npm test -- --coverage --watchAll=false
          else
            echo "No tests found, skipping..."
          fi

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        if: github.event_name == 'push' && hashFiles('frontend/coverage/**') != ''
        with:
          directory: ./frontend/coverage
          flags: frontend

  lint-charts:
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.charts == 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: '3.12.1'

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Set up chart-testing
        uses: helm/chart-testing-action@v2.6.1

      - name: Lint charts
        run: ct lint --target-branch ${{ github.event.repository.default_branch }}

  build-images:
    runs-on: ubuntu-latest
    needs: [changes, test-backend, test-frontend]
    if: always() && (needs.changes.outputs.docker == 'true' || needs.changes.outputs.backend == 'true' || needs.changes.outputs.frontend == 'true')
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        include:
          - component: backend
            context: ./backend
            condition: ${{ needs.changes.outputs.backend == 'true' }}
          - component: frontend  
            context: ./frontend
            condition: ${{ needs.changes.outputs.frontend == 'true' }}
    steps:
      - name: Checkout repository
        if: ${{ matrix.condition }}
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        if: ${{ matrix.condition }}
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        if: ${{ matrix.condition }}
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        if: ${{ matrix.condition }}
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}/${{ matrix.component }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix=sha-,format=short

      - name: Build and push image
        if: ${{ matrix.condition }}
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.context }}
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name == 'push' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max